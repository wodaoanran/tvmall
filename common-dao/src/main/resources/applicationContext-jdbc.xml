<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

      <context:component-scan base-package="cn.yunhe.java"/>
       <!-- 加载配置文件properties-->
       <context:property-placeholder file-encoding="utf-8" location="classpath:dbconfig.properties"/>

       <!-- 连接池 -->
       <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
             <property name="driverClassName" value="${jdbc.driver}"/>
             <property name="url" value="${jdbc.url}"/>
             <property name="username" value="${jdbc.username}"/>
             <property name="password" value="${jdbc.password}"/>

             <property name="filters" value="stat" />
             <property name="maxActive" value="${maxActive}" />
             <property name="initialSize" value="${initialSize}" />
             <property name="maxWait" value="${maxWait}" />
             <property name="minIdle" value="${minIdle}" />
             <property name="timeBetweenEvictionRunsMillis" value="60000" />
             <property name="minEvictableIdleTimeMillis" value="300000" />
             <property name="testWhileIdle" value="true" />
             <property name="testOnBorrow" value="false" />
             <property name="testOnReturn" value="false" />
             <property name="poolPreparedStatements" value="true" />
             <property name="maxOpenPreparedStatements" value="20" />
             <property name="asyncInit" value="true" />
       </bean>

       <!-- mybatis sqlSessionFactory 抽象工厂 -->
      <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <property name="mapperLocations" value="classpath:mybatis/**/*.xml"/>
            <property name="dataSource" ref="dataSource"/>
            <property name="configLocation" value="classpath:sqlMapConfig.xml"/>
            <property name="typeAliasesPackage" value="cn.yunhe.java.pojo"/>
      </bean>

      <!-- SqlSessionTemplate方式 -->
      <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
            <constructor-arg index="0" ref="sqlSessionFactory" />
      </bean>

      <!-- 接口方式 -->
      <bean id="mapperConfig" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <property name="basePackage" value="cn.yunhe.java.dao.inter"/>
            <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
      </bean>

      <!-- 事务管理器 -->
      <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <property name="dataSource" ref="dataSource"/>
      </bean>

      <!-- 注解方式-->
      <!--<tx:annotation-driven proxy-target-class="true"/>-->

      <!-- xml配置的声明式事务 -->
      <tx:advice id="txAdvice" transaction-manager="txManager">
            <tx:attributes>
                  <tx:method name="select*" propagation="NOT_SUPPORTED"/>
                  <tx:method name="query*" propagation="NOT_SUPPORTED"/>
                  <tx:method name="find*" propagation="NOT_SUPPORTED"/>
                  <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
                  <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
                  <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
                  <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
                  <tx:method name="upd*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
                  <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
                  <tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            </tx:attributes>
      </tx:advice>
      <aop:config proxy-target-class="true" expose-proxy="true">
            <aop:advisor advice-ref="txAdvice" pointcut="execution(* cn.yunhe.java.services..*.* (..))"/>
      </aop:config>

</beans>